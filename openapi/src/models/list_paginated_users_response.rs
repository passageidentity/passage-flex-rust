/*
 * Passage Management API
 *
 * Passage's management API to manage your Passage apps and users.
 *
 * The version of the OpenAPI document: 1
 * Contact: support@passage.id
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ListPaginatedUsersResponse {
    #[serde(rename = "_links")]
    pub _links: Box<models::PaginatedLinks>,
    /// time anchor (Unix timestamp) --> all users returned created before this timestamp
    #[serde(rename = "created_before")]
    pub created_before: i64,
    #[serde(rename = "limit")]
    pub limit: i32,
    #[serde(rename = "page")]
    pub page: i32,
    /// total number of users for a particular query
    #[serde(rename = "total_users")]
    pub total_users: i64,
    #[serde(rename = "users")]
    pub users: Vec<models::ListPaginatedUsersItem>,
}

impl ListPaginatedUsersResponse {
    pub fn new(
        _links: models::PaginatedLinks,
        created_before: i64,
        limit: i32,
        page: i32,
        total_users: i64,
        users: Vec<models::ListPaginatedUsersItem>,
    ) -> ListPaginatedUsersResponse {
        ListPaginatedUsersResponse {
            _links: Box::new(_links),
            created_before,
            limit,
            page,
            total_users,
            users,
        }
    }
}
